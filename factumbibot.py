from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
import logging

API_TOKEN = '7633080886:AAG5KX0GQi1fUz4es2mO13HZ2NRZSJJmT0k'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# --- FSM –¥–ª—è —Å–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏ ---
class Form(StatesGroup):
    name = State()
    company = State()
    contact = State()
    interest = State()

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add("\U0001F4CA BI-–ø—Ä–æ–¥—É–∫—Ç—ã", "\U0001F4C2 –ü—Ä–∏–º–µ—Ä—ã –¥–∞—à–±–æ—Ä–¥–æ–≤")
main_kb.add("\U0001F50D –ó–∞–∫–∞–∑–∞—Ç—å –∞—É–¥–∏—Ç", "\U0001F4EC –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
main_kb.add("\u2753 –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", "\U0001F4AC –°–≤—è–∑–∞—Ç—å—Å—è")

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç FACTUM BI.\n\n–ü–æ–º–æ–≥–∞—é –±–∏–∑–Ω–µ—Å—É –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–Ω—è—Ç–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥—ã –∏ —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è.\n\n–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        reply_markup=main_kb
    )

@dp.message_handler(lambda message: message.text == "\U0001F4CA BI-–ø—Ä–æ–¥—É–∫—Ç—ã")
async def show_products(message: types.Message):
    await message.answer(
        "–£ –Ω–∞—Å 6 BI-–ø—Ä–æ–¥—É–∫—Ç–æ–≤:\n\n"
        "üîß –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥\n"
        "üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥\n"
        "üß≠ –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥\n"
        "üß± –£–ª—É—á—à–µ–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤\n"
        "üß∞ BI —Å –Ω—É–ª—è\n"
        "üîé –ê—É–¥–∏—Ç —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã"
    )

@dp.message_handler(lambda message: message.text == "\U0001F4C2 –ü—Ä–∏–º–µ—Ä—ã –¥–∞—à–±–æ—Ä–¥–æ–≤")
async def show_examples(message: types.Message):
    await message.answer("–ü—Ä–∏–º–µ—Ä—ã –¥–∞—à–±–æ—Ä–¥–æ–≤: [—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏–ª–∏ PDF]")

@dp.message_handler(lambda message: message.text == "\U0001F50D –ó–∞–∫–∞–∑–∞—Ç—å –∞—É–¥–∏—Ç")
async def audit_start(message: types.Message):
    await Form.name.set()
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")

@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await Form.next()
    await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)?")

@dp.message_handler(state=Form.company)
async def process_company(message: types.Message, state: FSMContext):
    await state.update_data(company=message.text)
    await Form.next()
    await message.answer("–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è? (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –ø–æ—á—Ç–∞)")

@dp.message_handler(state=Form.contact)
async def process_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    await Form.next()
    await message.answer("–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")

@dp.message_handler(state=Form.interest)
async def process_interest(message: types.Message, state: FSMContext):
    data = await state.get_data()
    msg = (
        f"\U0001F4DD –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∞—É–¥–∏—Ç:\n"
        f"–ò–º—è: {data['name']}\n"
        f"–ö–æ–º–ø–∞–Ω–∏—è: {data['company']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}\n"
        f"–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: {message.text}"
    )
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    await bot.send_message(chat_id=message.chat.id, text=msg)
    await state.finish()

@dp.message_handler(lambda message: message.text == "\U0001F4EC –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def leave_request(message: types.Message):
    await audit_start(message)

@dp.message_handler(lambda message: message.text == "\u2753 –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
async def faq(message: types.Message):
    await message.answer("\u2022 –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç? ‚Äî –æ—Ç 30 —Ç—ã—Å. —Ä—É–±–ª–µ–π.\n\u2022 –°—Ä–æ–∫–∏? ‚Äî –æ—Ç 3‚Äì5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.\n\u2022 –§–æ—Ä–º–∞—Ç—ã? ‚Äî Power BI, Looker Studio, –¥—Ä.\n\u2022 –ö–∞–∫ –ø–µ—Ä–µ–¥–∞—ë—Ç–µ –¥–∞–Ω–Ω—ã–µ? ‚Äî —á–µ—Ä–µ–∑ API, –±–µ–∑–æ–ø–∞—Å–Ω–æ.")

@dp.message_handler(lambda message: message.text == "\U0001F4AC –°–≤—è–∑–∞—Ç—å—Å—è")
async def contact(message: types.Message):
    await message.answer("–ü–∏—à–∏—Ç–µ: @—Ç–≤–æ–π_–Ω–∏–∫ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ üëâ t.me/—Ç–≤–æ–π_–Ω–∏–∫")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)